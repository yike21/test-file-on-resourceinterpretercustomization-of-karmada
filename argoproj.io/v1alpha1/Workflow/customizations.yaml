apiVersion: config.karmada.io/v1alpha1
kind: ResourceInterpreterCustomization
metadata:
  name: declarative-configuration-workflow
spec:
  target:
    apiVersion: argoproj.io/v1alpha1
    kind: Workflow
  customizations:
    replicaResource:
      luaScript: >
        local kube = require("kube")
        function GetReplicas(obj)
          replica = 1
          if obj.spec.parallelism ~= nil then
            replica = obj.spec.parallelism
          end
          podTemplateSpec = {}
          podTemplateSpec.spec = {}
          podTemplateSpec.spec.affinity = obj.spec.affinity
          podTemplateSpec.spec.nodeSelector = obj.spec.nodeSelector
          podTemplateSpec.spec.tolerations = obj.spec.tolerations
          requirement = kube.accuratePodRequirements(podTemplateSpec)
          return replica, requirement
        end
    replicaRevision:
      luaScript: >
        function ReviseReplica(obj, replica)
          obj.spec.parallelism = replica
          return obj
        end
    healthInterpretation:
      luaScript: >
        function InterpretHealth(observedObj)
          if observedObj.status.phase == nil or observedObj.status.phase == '' or observedObj.status.phase == 'Failed' or observedObj.status.failed == 'Error' then
            return false
          end
          return true
        end
    statusAggregation:
      luaScript: >
        function AggregateStatus(desiredObj, statusItems)
          if statusItems == nil then
            return desiredObj
          end
          if desiredObj.status == nil then
            desiredObj.status = {}
          end
          if desiredObj.status.conditions == nil then
            desiredObj.status.conditions = {}
          end       
          phase = ''
          startedAt = {}
          finishedAt = {}
          estimatedDuration = 0
          progress = ''
          message = ''
          compressedNodes = ''
          nodes = {}
          offloadNodeStatusVersion = ''
          storedTemplates = {}
          persistentVolumeClaims = {} 
          outputs = {}
          storedWorkflowTemplateSpec = {}
          synchronization = {}
          artifactRepositoryRef = {}
          artifactGCStatus = {}
          generation = 0

          resourcesDuration = {}
          conditions = {}
          type = ''
          conditionsIndex = 0
          workflowCompleted = {}
          workflowPodRunning = {}
          workflowSpecWarning = {}
          workflowSpecError = {}
          workflowMetricsError = {}
          workflowArtifactGCError = {}
          for i = 1, #statusItems do
            if statusItems[i].status ~= nil and statusItems[i].status.phase ~= nil then
              if phase == '' then
                phase = phase..statusItems[i].clusterName..'='..statusItems[i].status.phase
              else
                phase = phase..','..statusItems[i].clusterName..'='..statusItems[i].status.phase
              end
            end
            if statusItems[i].status ~= nil and statusItems[i].status.startedAt ~= nil and statusItems[i].status.startedAt ~= '' then
              startedAt = statusItems[i].status.startedAt
            end
            if statusItems[i].status ~= nil and statusItems[i].status.finishedAt ~= nil and statusItems[i].status.finishedAt ~= '' then
              finishedAt = statusItems[i].status.finishedAt
            end
            if statusItems[i].status ~= nil and statusItems[i].status.estimatedDuration ~= nil then
              estimatedDuration = estimatedDuration + statusItems[i].status.estimatedDuration
            end

            if statusItems[i].status ~= nil and statusItems[i].status.tmpGeneration ~= nil then
              generation = statusItems[i].status.tmpGeneration
            end
            if statusItems[i].status ~= nil and statusItems[i].status.compressedNodes ~= nil and statusItems[i].status.compressedNodes ~= '' then
              compressedNodes = statusItems[i].status.compressedNodes
            end
            if statusItems[i].status ~= nil and statusItems[i].status.nodes ~= nil then
              nodes = statusItems[i].status.nodes
            end          
            if statusItems[i].status ~= nil and statusItems[i].status.offloadNodeStatusVersion ~= nil and statusItems[i].status.offloadNodeStatusVersion ~= '' then
              offloadNodeStatusVersion = statusItems[i].status.offloadNodeStatusVersion
            end   
            if statusItems[i].status ~= nil and statusItems[i].status.storedTemplates ~= nil then
              storedTemplates = statusItems[i].status.storedTemplates
            end     
            if statusItems[i].status ~= nil and statusItems[i].status.persistentVolumeClaims ~= nil then
              persistentVolumeClaims = statusItems[i].status.persistentVolumeClaims
            end   
            if statusItems[i].status ~= nil and statusItems[i].status.outputs ~= nil then
              outputs = statusItems[i].status.outputs
            end   
            if statusItems[i].status ~= nil and statusItems[i].status.storedWorkflowTemplateSpec ~= nil then
              storedWorkflowTemplateSpec = statusItems[i].status.storedWorkflowTemplateSpec
            end   
            if statusItems[i].status ~= nil and statusItems[i].status.synchronization ~= nil then
              synchronization = statusItems[i].status.synchronization
            end   
            if statusItems[i].status ~= nil and statusItems[i].status.artifactRepositoryRef ~= nil then
              artifactRepositoryRef = statusItems[i].status.artifactRepositoryRef
            end   
            if statusItems[i].status ~= nil and statusItems[i].status.artifactGCStatus ~= nil then
              artifactGCStatus = statusItems[i].status.artifactGCStatus
            end 


            if statusItems[i].status ~= nil and statusItems[i].status.progress ~= nil then
              if progress == '' then
                progress = progress..statusItems[i].clusterName..'='..statusItems[i].status.progress
              else
                progress = progress..','..statusItems[i].clusterName..'='..statusItems[i].status.progress
              end
            end
            if statusItems[i].status ~= nil and statusItems[i].status.message ~= nil then
              if message == '' then
                message = message..statusItems[i].clusterName..'='..statusItems[i].status.message
              else
                message = message..','..statusItems[i].clusterName..'='..statusItems[i].status.message
              end
            end          
            if statusItems[i].status ~= nil and statusItems[i].status.resourcesDuration ~= nil then
              for resourceName, duration in pairs(statusItems[i].status.resourcesDuration) do
                if resourcesDuration[resourceName] == nil then
                  resourcesDuration[resourceName] = duration
                else
                  resourcesDuration[resourceName] = resourcesDuration[resourceName] + duration
                end
              end
            end
            if statusItems[i].status ~= nil and statusItems[i].status.conditions ~= nil then
              for conditionIndex = 1, #statusItems[i].status.conditions do
                if statusItems[i].status.conditions[conditionIndex].type == 'Completed' and statusItems[i].status.conditions[conditionIndex].status == 'True' then
                  type = statusItems[i].status.conditions[conditionIndex].type
                  break
                end                                
                if statusItems[i].status.conditions[conditionIndex].type == 'SpecError' and statusItems[i].status.conditions[conditionIndex].status == 'True' then
                  type = statusItems[i].status.conditions[conditionIndex].type
                  break
                end
                if statusItems[i].status.conditions[conditionIndex].type == 'MetricsError' and statusItems[i].status.conditions[conditionIndex].status == 'True' then
                  type = statusItems[i].status.conditions[conditionIndex].type
                  break
                end
                if statusItems[i].status.conditions[conditionIndex].type == 'ArtifactGCError' and statusItems[i].status.conditions[conditionIndex].status == 'True' then
                  type = statusItems[i].status.conditions[conditionIndex].type
                  break
                end
                if statusItems[i].status.conditions[conditionIndex].type == 'SpecWarning' and statusItems[i].status.conditions[conditionIndex].status == 'True' then
                  type = statusItems[i].status.conditions[conditionIndex].type
                  break
                end
                if statusItems[i].status.conditions[conditionIndex].type == 'PodRunning' and statusItems[i].status.conditions[conditionIndex].status == 'True' then
                  type = statusItems[i].status.conditions[conditionIndex].type
                  break
                end
              end
            end
            if type == 'Completed' then
              workflowCompletedNextIndex = #workflowCompleted + 1
              workflowCompleted[workflowCompletedNextIndex] = statusItems[i].clusterName
            end
            if type == 'SpecError' then
              workflowSpecErrorNextIndex = #workflowSpecError + 1
              workflowSpecError[workflowSpecErrorNextIndex] = statusItems[i].clusterName
            end
            if type == 'MetricsError' then
              workflowMetricsErrorNextIndex = #workflowMetricsError + 1
              workflowMetricsError[workflowMetricsErrorNextIndex] = statusItems[i].clusterName
            end
            if type == 'ArtifactGCError' then
              workflowArtifactGCErrorNextIndex = #workflowArtifactGCError + 1
              workflowArtifactGCError[workflowArtifactGCErrorNextIndex] = statusItems[i].clusterName
            end
            if type == 'SpecWarning' then
              workflowSpecWarningNextIndex = #workflowSpecWarning + 1
              workflowSpecWarning[workflowSpecWarningNextIndex] = statusItems[i].clusterName
            end
            if type == 'PodRunning' then
              workflowPodRunningNextIndex = #workflowPodRunning + 1
              workflowPodRunning[workflowPodRunningNextIndex] = statusItems[i].clusterName
            end                                                
          end
          if #workflowSpecError > 0 then        
            condition = {}
            condition.type = 'SpecError'
            condition.status = 'True'
            condition.message = 'Workflow executed SpecError in member clusters: '
            for i = 1, #workflowSpecError - 1 do
              condition.message = condition.message..workflowSpecError[i]..', '
            end
            condition.message = condition.message..workflowSpecError[#workflowSpecError]
            conditionsIndex = conditionsIndex + 1
            conditions[conditionsIndex] = condition
          end
          if #workflowMetricsError > 0 then        
            condition = {}
            condition.type = 'MetricsError'
            condition.status = 'True'
            condition.message = 'Workflow executed MetricsError in member clusters: '
            for i = 1, #workflowMetricsError - 1 do
              condition.message = condition.message..workflowMetricsError[i]..', '
            end
            condition.message = condition.message..workflowMetricsError[#workflowMetricsError]
            conditionsIndex = conditionsIndex + 1
            conditions[conditionsIndex] = condition
          end 
          if #workflowArtifactGCError > 0 then        
            condition = {}
            condition.type = 'ArtifactGCError'
            condition.status = 'True'
            condition.message = 'Workflow executed ArtifactGCError in member clusters: '
            for i = 1, #workflowArtifactGCError - 1 do
              condition.message = condition.message..workflowArtifactGCError[i]..', '
            end
            condition.message = condition.message..workflowArtifactGCError[#workflowArtifactGCError]
            conditionsIndex = conditionsIndex + 1
            conditions[conditionsIndex] = condition
          end
          if #workflowSpecWarning > 0 then        
            condition = {}
            condition.type = 'SpecWarning'
            condition.status = 'True'
            condition.message = 'Workflow executed SpecWarning in member clusters: '
            for i = 1, #workflowSpecWarning - 1 do
              condition.message = condition.message..workflowSpecWarning[i]..', '
            end
            condition.message = condition.message..workflowSpecWarning[#workflowSpecWarning]
            conditionsIndex = conditionsIndex + 1
            conditions[conditionsIndex] = condition
          end
          if #workflowPodRunning > 0 then        
            condition = {}
            condition.type = 'PodRunning'
            condition.status = 'True'
            condition.message = 'Workflow executed PodRunning in member clusters: '
            for i = 1, #workflowPodRunning - 1 do
              condition.message = condition.message..workflowPodRunning[i]..', '
            end
            condition.message = condition.message..workflowPodRunning[#workflowPodRunning]
            conditionsIndex = conditionsIndex + 1
            conditions[conditionsIndex] = condition
          end                
          if #workflowCompleted > 0 then 
            condition = {}
            condition.type = 'Completed'
            condition.status = 'True'
            condition.message = 'Workflow executed Completed in member clusters: '
            for i = 1, #workflowCompleted - 1 do
              condition.message = condition.message..workflowCompleted[i]..', '
            end
            condition.message = condition.message..workflowCompleted[#workflowCompleted]
            conditionsIndex = conditionsIndex + 1
            conditions[conditionsIndex] = condition 
          end
          desiredObj.metadata.generation = generation
          desiredObj.status.phase = phase
          desiredObj.status.startedAt = startedAt
          desiredObj.status.finishedAt = finishedAt
          desiredObj.status.estimatedDuration = estimatedDuration
          desiredObj.status.progress = progress
          desiredObj.status.message = message
          desiredObj.status.resourcesDuration = resourcesDuration
          desiredObj.status.conditions = conditions
          desiredObj.status.compressedNodes = compressedNodes
          desiredObj.status.nodes = nodes
          desiredObj.status.offloadNodeStatusVersion = offloadNodeStatusVersion
          desiredObj.status.storedTemplates = storedTemplates
          desiredObj.status.persistentVolumeClaims = persistentVolumeClaims
          desiredObj.status.outputs = outputs
          desiredObj.status.storedWorkflowTemplateSpec = storedWorkflowTemplateSpec
          desiredObj.status.synchronization = synchronization
          desiredObj.status.artifactRepositoryRef = artifactRepositoryRef
          desiredObj.status.artifactGCStatus = artifactGCStatus
          return desiredObj
        end
    retention:
      luaScript: >
        function Retain(desiredObj, observedObj)
          return observedObj
        end
    statusReflection:
      luaScript: >
        function ReflectStatus (observedObj)
          status = {}
          if observedObj == nil or observedObj.status == nil then 
            return status
          end
          status = observedObj.status
          status.tmpGeneration = observedObj.metadata.generation
          return status
        end
    dependencyInterpretation:
      luaScript: >
        function GetDependencies(desiredObj)
          dependentConfigMaps = {}
          dependentSecrets = {}
          dependentSas = {}
          dependentPVCs = {}
          refs = {}
          local idx = 1
          if desiredObj.spec.executor ~= nil and desiredObj.spec.executor.serviceAccountName ~= nil and desiredObj.spec.executor.serviceAccountName ~= '' then
            dependentSas[desiredObj.spec.executor.serviceAccountName] = true
          end
          if desiredObj.spec.volumeClaimTemplates ~= nil then
            for volumeClaimIndex, volumeClaim in pairs(desiredObj.spec.volumeClaimTemplates) do
              if volumeClaim.metadata.name ~= nil and volumeClaim.metadata.name ~= '' then
                dependentPVCs[volumeClaim.metadata.name] = true
              end
            end
          end
          volumes = {}
          if desiredObj.spec.volumes ~= nil then
            volumes = desiredObj.spec.volumes
          end
          for volumnIndex, volume in pairs(volumes) do 
            if volume.configMap ~= nil and volume.configMap.name ~= nil and volume.configMap.name ~= '' then
              dependentConfigMaps[volume.configMap.name] = true
            end
            if volume.projected ~= nil and volume.projected.sources ~= nil then
              sources = {}
              sources = volume.projected.sources
              for sourceIndex, source in pairs(sources) do
                if source.configMap ~= nil and source.configMap.name ~= nil and source.configMap.name ~= '' then
                  dependentConfigMaps[source.configMap.name] = true
                end
                if source.secret ~= nil and source.secret.name ~= nil and source.secret.name ~= '' then
                  dependentSecrets[source.secret.name] = true
                end
              end
            end
            if volume.azureFile ~= nil and volume.azureFile.secretName ~= nil and volume.azureFile.secretName ~= '' then 
              dependentSecrets[volume.azureFile.secretName] = true
            end
            if volume.cephfs ~= nil and volume.cephfs.secretRef ~= nil and volume.cephfs.secretRef.name ~= nil and volume.cephfs.secretRef.name ~= '' then
              dependentSecrets[volume.cephfs.secretRef.name] = true
            end
            if volume.cinder ~= nil and volume.cinder.secretRef ~= nil and volume.cinder.secretRef.name ~= nil and volume.cinder.secretRef.name ~= '' then
              dependentSecrets[volume.cinder.secretRef.name] = true
            end
            if volume.flexVolume ~= nil and volume.flexVolume.secretRef ~= nil and volume.flexVolume.secretRef.name ~= nil and volume.flexVolume.secretRef.name ~= '' then
              dependentSecrets[volume.flexVolume.secretRef.name] = true
            end
            if volume.rbd ~= nil and volume.rbd.secretRef ~= nil and volume.rbd.secretRef.name ~= nil and volume.rbd.secretRef.name ~= '' then
              dependentSecrets[volume.rbd.secretRef.name] = true
            end
            if volume.secret ~= nil and volume.secret.name ~= nil and volume.secret.name ~= '' then
              dependentSecrets[volume.secret.name] = true
            end
            if volume.scaleIO ~= nil and volume.scaleIO.secretRef ~= nil and volume.scaleIO.secretRef.name ~= nil and volume.scaleIO.secretRef.name ~= '' then
              dependentSecrets[volume.scaleIO.secretRef.name] = true
            end
            if volume.iscsi ~= nil and volume.iscsi.secretRef ~= nil and volume.iscsi.secretRef.name ~= nil and volume.iscsi.secretRef.name ~= '' then
              dependentSecrets[volume.iscsi.secretRef.name] = true
            end
            if volume.storageos ~= nil and volume.storageos.secretRef ~= nil and volume.storageos.secretRef.name ~= nil and volume.storageos.secretRef.name ~= '' then
              dependentSecrets[volume.storageos.secretRef.name] = true
            end
            if volume.csi ~= nil and volume.csi.nodePublishSecretRef ~= nil and volume.csi.nodePublishSecretRef.name ~= nil and volume.csi.nodePublishSecretRef.name ~= '' then
              dependentSecrets[volume.csi.nodePublishSecretRef.name] = true
            end
            if volume.persistentVolumeClaim ~= nil and volume.persistentVolumeClaim.claimName ~= nil and volume.persistentVolumeClaim.claimName ~= '' then
              dependentPVCs[volume.persistentVolumeClaim.claimName] = true
            end
          end
          if desiredObj.spec.imagePullSecrets ~= nil then
            reference = {}
            reference = desiredObj.spec.imagePullSecrets
            for key, value in pairs(reference) do
              if value.name ~= nil and value.name ~= '' then
                dependentSecrets[value.name] = true
              end
            end
          end
          if desiredObj.spec.serviceAccountName ~= nil and desiredObj.spec.serviceAccountName ~= '' and desiredObj.spec.serviceAccountName ~= 'default' then
              dependentSas[desiredObj.spec.serviceAccountName] = true
          end
          for key, value in pairs(dependentConfigMaps) do
            dependObj = {}
            dependObj.apiVersion = 'v1'
            dependObj.kind = 'ConfigMap'
            dependObj.name = key
            dependObj.namespace = desiredObj.metadata.namespace
            refs[idx] = dependObj
            idx = idx + 1
          end
          for key, value in pairs(dependentSecrets) do
            dependObj = {}
            dependObj.apiVersion = 'v1'
            dependObj.kind = 'Secret'
            dependObj.name = key
            dependObj.namespace = desiredObj.metadata.namespace
            refs[idx] = dependObj
            idx = idx + 1
          end
          for key, value in pairs(dependentSas) do
            dependObj = {}
            dependObj.apiVersion = 'v1'
            dependObj.kind = 'ServiceAccount'
            dependObj.name = key
            dependObj.namespace = desiredObj.metadata.namespace
            refs[idx] = dependObj
            idx = idx + 1
          end
          for key, value in pairs(dependentPVCs) do
            dependObj = {}
            dependObj.apiVersion = 'v1'
            dependObj.kind = 'PersistentVolumeClaim'
            dependObj.name = key
            dependObj.namespace = desiredObj.metadata.namespace
            refs[idx] = dependObj
            idx = idx + 1
          end
          return refs
        end
